[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qcal"
dynamic = ["version"] 
description = "Quantum Calibration"
readme = "README.md"
requires-python = ">=3.11, <4"

authors = [
    {name = "Akel Hashim", email = "ahashim@berkeley.edu"}
]

keywords = ["circuit", "gate", "quantum", "calibration", "quantum computing"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
]

dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.2",
    "bqskit>=1.1.0a3",
    "scipy>=1.10.1",
    "sympy>=1.12",
    "matplotlib>=3.7.1",
    "plotly>=5.15.0",
    "networkx>=2.4",
    "pyyaml>=6.0",
    "ipython>=8.14.0",
    "scikit-learn>=1.3.0",
    "seaborn>=0.13.0",
    "lmfit>=1.3.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov",
    "black",
    "flake8",
    "mypy",
    "isort",
    "ruff",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "nbsphinx",
]
test = [
    "pytest>=7.0",
    "pytest-cov",
    "coverage",
]

[project.urls]
Homepage = "https://github.com/akelhashim/qcal/"
Repository = "https://github.com/akelhashim/qcal/"
"Bug Tracker" = "https://github.com/akelhashim/qcal/issues"
"Source Code" = "https://github.com/akelhashim/qcal/"

# Setuptools configuration - Dynamic version
[tool.setuptools.dynamic]
version = {attr = "qcal.__version__"}

# Package discovery - automatically find all packages
[tool.setuptools.packages.find]
where = ["."]
include = ["qcal*"]
exclude = ["tests*", "docs*", "examples*", "*.tests", "*.tests.*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.eggs
  | _build
  | build
  | dist
  | __pycache__
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=qcal --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["qcal"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]
precision = 2
show_missing = true

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
show_error_codes = true
pretty = true

# Ruff configuration (modern linter/formatter alternative to flake8)
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = []

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py